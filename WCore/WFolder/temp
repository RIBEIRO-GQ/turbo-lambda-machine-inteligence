// -*- C++ -*-
// --->Path manipulation<---//
/* Made by Wahh R. S. */
#ifndef PATHMANIP_
#define PATHMANIP_
#include "../WCore/WCore"
#include "../WList/WRecursive"
#include "WDirmanip"
namespace wrs
{
	string getPath(WDir);
	// Get the contents of WDir and returns the
	// paths on string. ex: WDir/WDir1/WDir2
	bool dirExist(string);
	// Make sure if a directory exists.
	int dirKeep(string);
	// Creates a directory if it don't exist, 
	// and do nothing if it exists.
	bool fileExist(string);
	// Make sure if a directory exist;
	string abreviatePath(string, string);
	// Transform a full path in an anreviated path like: dir1/dir2/example to
	// ../../example.
	void parsePaths(WDir &, typestrings &, char);
	// parse the contents of the WDir element to the
	// typestrings conserving the type and transforming the name on a full
	// path.
	/* Definitions */
	string getPath(WDir o)
	{
		if (o.position() == 0)
			return o.object().obj;
		else
			return getPath(o.back()) + "/" + o.object().obj;
	}
	int dirKeep(string dir_)
	{
		ofstream _vita_(dir_ + "/vita");
		if (_vita_.fail())
		{
			system(string("mkdir " + dir_).c_str());
		}
		else
		{
			_vita_.close();
		}
		remove(string(dir_ + "/vita").c_str());
		return 0;
	}

	bool dirExist(string dir)
	{
		ofstream _vita_(dir + "/vita");
		if (_vita_.fail())
			return false;
		else
		{
			_vita_.close();
			remove(string(dir + "/vita").c_str());
			return true;
		}
	}

	bool fileExist(string path)
	{
		ifstream Wfin(path);
		if (Wfin.fail())
			return false;
		else
			return true;
	}
	string abreviatePath(string source, string dest)
	{
		string abr, s = source,
			d = dest.substr(0, 3) == ".//" ? dest.substr(3, dest.size() - 2) : dest;
		while (s.find('/') != string::npos)
		{
			if (d.substr(0, d.find('/')) == s.substr(0, s.find('/')))
			{
				s.erase(0, s.find('/') + 1);
				d.erase(0, d.find('/') + 1);
			}
			else
				break;
		}
		for (int i = 0; i < d.size(); i++)
			if (d[i] == '/')
				abr += "../";
			else;
		abr += s;
		return abr;
	}
	void parsePaths(WDir & Dir, typestrings & paths, char addrType)
	{
		// paths.clear();
		typestring path = typestring { Dir.object().type, getPath(Dir) };
		// cerr << "#" << path<< endl;
		if (path.type == addrType)
		{
			paths.push_back(path);
		}
		else if (addrType == wrs::all)
		{
			paths.push_back(path);
		}
		else;
		for (int i = 0; i < Dir.size(); i++)
			parsePaths(Dir[i], paths, addrType);
	}
	void parsePaths(const string & Dir, typestrings & paths)
	{
		WDir o;
		getContent(Dir, o);
		parsePaths(o, paths, wrs::all);
	}
}
#endif